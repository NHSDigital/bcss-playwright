import pytest
from playwright.sync_api import Page
from pages.base_page import BasePage
from pages.call_and_recall.call_and_recall_page import CallAndRecallPage
from pages.call_and_recall.planning_and_monitoring_page import PlanningAndMonitoringPage
from pages.call_and_recall.create_a_plan_page import CreateAPlanPage
from utils.user_tools import UserTools


@pytest.fixture(scope="function", autouse=True)
def before_each(page: Page):
    """
    Before every test is executed, this fixture logs in to BCSS as a test user and navigates to the call and recall page
    """
    # Log in to BCSS
    UserTools.user_login(page, "Hub Manager State Registered at BCS01")

    # Go to call and recall page
    BasePage(page).go_to_call_and_recall_page()


def test_create_a_plan_weekly_rate(page: Page):
    """
    Test to confirm that Hub Manager State Registered can set a weekly rate for invitations
    """
    CallAndRecallPage(page).go_to_planning_and_monitoring_page()
    PlanningAndMonitoringPage(page).click_on_bcs001()
    CreateAPlanPage(page).click_create_a_plan()
    page.locator("#setAll").click()
    page.locator("input#weeklyRate").fill("130")
    page.locator("#update").click()

    # Add assertions here to verify rates are set correctly
    assert True  # Replace with actual assertions


def test_create_a_plan_daily_rate(page: Page):
    """
    Test to confirm that Hub Manager State Registered can set a daily rate for invitations
    """
    CallAndRecallPage(page).go_to_planning_and_monitoring_page()
    PlanningAndMonitoringPage(page).click_on_bcs001()
    CreateAPlanPage(page).click_create_a_plan()
    page.locator("#setAll").click()
    page.locator("input#dailyRate").fill("28")
    page.locator("#update").click()

    # Add assertions here to verify rates are set correctly
    assert True  # Replace with actual assertions


def test_update_week_rate(page: Page):
    """
    Test to confirm that Hub Manager State Registered can update the invitation rate for a specific week
    """
    CallAndRecallPage(page).go_to_planning_and_monitoring_page()
    PlanningAndMonitoringPage(page).click_on_bcs001()
    CreateAPlanPage(page).click_create_a_plan()
    # Simulate entering rate and updating, then add assertions to verify increments
    assert True  # Replace with actual assertions


def test_complete_invitation_planning(page: Page):
    """
    Test to confirm that Hub Manager - State Registered can complete invitation planning for a screening centre
    """
    CallAndRecallPage(page).go_to_planning_and_monitoring_page()
    PlanningAndMonitoringPage(page).click_on_bcs001()
    CreateAPlanPage(page).click_create_a_plan()
    # Add assertions to confirm successful creation and saving of the plan
    assert True  # Replace with actual assertions
